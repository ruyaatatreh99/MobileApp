{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport Constants from 'expo-constants';\nimport * as Notifications from 'expo-notifications';\nimport * as Permissions from 'expo-permissions';\nimport React, { useState, useEffect, useRef } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nNotifications.setNotificationHandler({\n  handleNotification: function handleNotification() {\n    return _regeneratorRuntime.async(function handleNotification$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            return _context.abrupt(\"return\", {\n              shouldShowAlert: true,\n              shouldPlaySound: false,\n              shouldSetBadge: false\n            });\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  }\n});\nexport default function Sth(_ref) {\n  var msg = _ref.msg;\n\n  var _useState = useState(''),\n      _useState2 = _slicedToArray(_useState, 2),\n      expoPushToken = _useState2[0],\n      setExpoPushToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      notification = _useState4[0],\n      setNotification = _useState4[1];\n\n  var notificationListener = useRef();\n  var responseListener = useRef();\n\n  var notify = function notify() {\n    return _regeneratorRuntime.async(function notify$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(sendPushNotification(expoPushToken, msg));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  useEffect(function () {\n    registerForPushNotificationsAsync().then(function (token) {\n      return setExpoPushToken(token);\n    });\n    notificationListener.current = Notifications.addNotificationReceivedListener(function (notification) {\n      setNotification(notification);\n    });\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(function (response) {\n      console.log(response);\n    });\n    notify();\n    return function () {\n      Notifications.removeNotificationSubscription(notificationListener);\n      Notifications.removeNotificationSubscription(responseListener);\n    };\n  }, []);\n}\n\nfunction sendPushNotification(expoPushToken, msg) {\n  var message;\n  return _regeneratorRuntime.async(function sendPushNotification$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          console.log(expoPushToken);\n          message = {\n            to: expoPushToken,\n            sound: 'default',\n            title: ' Message',\n            body: msg,\n            data: {\n              data: 'goes here'\n            }\n          };\n          _context3.next = 4;\n          return _regeneratorRuntime.awrap(fetch('https://exp.host/--/api/v2/push/send', {\n            method: 'POST',\n            headers: {\n              Accept: 'application/json',\n              'Accept-encoding': 'gzip, deflate',\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(message)\n          }));\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction registerForPushNotificationsAsync() {\n  var token, _await$Permissions$ge, existingStatus, finalStatus, _await$Permissions$as, status;\n\n  return _regeneratorRuntime.async(function registerForPushNotificationsAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!Constants.isDevice) {\n            _context4.next = 21;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(Permissions.getAsync(Permissions.NOTIFICATIONS));\n\n        case 3:\n          _await$Permissions$ge = _context4.sent;\n          existingStatus = _await$Permissions$ge.status;\n          finalStatus = existingStatus;\n\n          if (!(existingStatus !== 'granted')) {\n            _context4.next = 12;\n            break;\n          }\n\n          _context4.next = 9;\n          return _regeneratorRuntime.awrap(Permissions.askAsync(Permissions.NOTIFICATIONS));\n\n        case 9:\n          _await$Permissions$as = _context4.sent;\n          status = _await$Permissions$as.status;\n          finalStatus = status;\n\n        case 12:\n          if (!(finalStatus !== 'granted')) {\n            _context4.next = 15;\n            break;\n          }\n\n          alert('Failed to get push token for push notification!');\n          return _context4.abrupt(\"return\");\n\n        case 15:\n          _context4.next = 17;\n          return _regeneratorRuntime.awrap(Notifications.getExpoPushTokenAsync());\n\n        case 17:\n          token = _context4.sent.data;\n          console.log(token);\n          _context4.next = 22;\n          break;\n\n        case 21:\n          alert('Must use physical device for Push Notifications');\n\n        case 22:\n          if (Platform.OS === 'android') {\n            Notifications.setNotificationChannelAsync('default', {\n              name: 'default',\n              importance: Notifications.AndroidImportance.MAX,\n              vibrationPattern: [0, 250, 250, 250],\n              lightColor: '#FF231F7C'\n            });\n          }\n\n          return _context4.abrupt(\"return\", token);\n\n        case 24:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["C:/Users/Ru'ya/myproject1/appScreens/sth.js"],"names":["Constants","Notifications","Permissions","React","useState","useEffect","useRef","setNotificationHandler","handleNotification","shouldShowAlert","shouldPlaySound","shouldSetBadge","Sth","msg","expoPushToken","setExpoPushToken","notification","setNotification","notificationListener","responseListener","notify","sendPushNotification","registerForPushNotificationsAsync","then","token","current","addNotificationReceivedListener","addNotificationResponseReceivedListener","response","console","log","removeNotificationSubscription","message","to","sound","title","body","data","fetch","method","headers","Accept","JSON","stringify","isDevice","getAsync","NOTIFICATIONS","existingStatus","status","finalStatus","askAsync","alert","getExpoPushTokenAsync","Platform","OS","setNotificationChannelAsync","name","importance","AndroidImportance","MAX","vibrationPattern","lightColor"],"mappings":"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","sourcesContent":["import Constants from 'expo-constants';\r\nimport * as Notifications from 'expo-notifications';\r\nimport * as Permissions from 'expo-permissions';\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { Text, View, Button, Platform } from 'react-native'; \r\n\r\nNotifications.setNotificationHandler({\r\n  handleNotification: async () => ({\r\n    shouldShowAlert: true,\r\n    shouldPlaySound: false,\r\n    shouldSetBadge: false,\r\n  }),\r\n});\r\n\r\nexport default function Sth({msg}) {\r\n  const [expoPushToken, setExpoPushToken] = useState('');\r\n  const [notification, setNotification] = useState(false);\r\n  const notificationListener = useRef();\r\n  const responseListener = useRef();\r\nconst notify=async()=>{\r\n await sendPushNotification(expoPushToken,msg);\r\n}\r\n  useEffect(() => {\r\n    registerForPushNotificationsAsync().then(token => setExpoPushToken(token));\r\n\r\n    // This listener is fired whenever a notification is received while the app is foregrounded\r\n    notificationListener.current = Notifications.addNotificationReceivedListener(notification => {\r\n      setNotification(notification);\r\n    });\r\n\r\n    // This listener is fired whenever a user taps on or interacts with a notification (works when app is foregrounded, backgrounded, or killed)\r\n    responseListener.current = Notifications.addNotificationResponseReceivedListener(response => {\r\n      console.log(response);\r\n    });\r\n    notify();\r\n    return () => {\r\n      Notifications.removeNotificationSubscription(notificationListener);\r\n      Notifications.removeNotificationSubscription(responseListener);\r\n    };\r\n   \r\n  }, []);\r\n\r\n\r\n/*return (\r\n <View>\r\n     <Text>Your expo push token: {expoPushToken}</Text>\r\n      <Button\r\n        color='#dc143c'\r\n        title=\" get tip of the day\"\r\n        onPress={async () => {\r\n          await sendPushNotification(expoPushToken,msg);\r\n        }}\r\n      />\r\n    </View>\r\n      );*/\r\n}\r\n\r\n// Can use this function below, OR use Expo's Push Notification Tool-> https://expo.io/notifications\r\nasync function sendPushNotification(expoPushToken,msg) {\r\n    console.log(expoPushToken);\r\n  const message = {\r\n    \r\n    to: expoPushToken,\r\n    sound: 'default',\r\n    title:' Message',\r\n    body: msg,\r\n    data: { data: 'goes here' },\r\n  };\r\n\r\n  await fetch('https://exp.host/--/api/v2/push/send', {\r\n    method: 'POST',\r\n    headers: {\r\n      Accept: 'application/json',\r\n      'Accept-encoding': 'gzip, deflate',\r\n      'Content-Type': 'application/json',\r\n    },\r\n    body: JSON.stringify(message),\r\n  });\r\n}\r\n\r\nasync function registerForPushNotificationsAsync() {\r\n  let token;\r\n  if (Constants.isDevice) {\r\n    const { status: existingStatus } = await Permissions.getAsync(Permissions.NOTIFICATIONS);\r\n    let finalStatus = existingStatus;\r\n    if (existingStatus !== 'granted') {\r\n      const { status } = await Permissions.askAsync(Permissions.NOTIFICATIONS);\r\n      finalStatus = status;\r\n    }\r\n    if (finalStatus !== 'granted') {\r\n      alert('Failed to get push token for push notification!');\r\n      return;\r\n    }\r\n    token = (await Notifications.getExpoPushTokenAsync()).data;\r\n    console.log(token);\r\n  } else {\r\n    alert('Must use physical device for Push Notifications');\r\n  }\r\n\r\n  if (Platform.OS === 'android') {\r\n    Notifications.setNotificationChannelAsync('default', {\r\n      name: 'default',\r\n      importance: Notifications.AndroidImportance.MAX,\r\n      vibrationPattern: [0, 250, 250, 250],\r\n      lightColor: '#FF231F7C',\r\n    });\r\n  }\r\n\r\n  return token;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}